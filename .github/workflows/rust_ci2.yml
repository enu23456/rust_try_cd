name: Build_and_Release

on:
    workflow_dispatch:

env:
  PROJECT_NAME: rust_try_cd

jobs:
  build:
  
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install musl tools
        if : matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt install -qq -y musl-tools --no-install-recommends
          
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}
          
      - name: Package for linux-musl
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          zip --junk-paths $PROJECT_NAME-${{ matrix.target }} target/${{ matrix.target }}/release/$PROJECT_NAME
      - name: Package for windows
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          powershell Compress-Archive -Path target/${{ matrix.target }}/release/$env:PROJECT_NAME.exe -DestinationPath $env:PROJECT_NAME-${{ matrix.target }}.zip
      - name: Package for macOS
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          zip --junk-paths $PROJECT_NAME-${{ matrix.target }} target/${{ matrix.target }}/release/$PROJECT_NAME
          
      - uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.target }}
          path: ${{ env.PROJECT_NAME }}-${{ matrix.target }}.zip

  draft-release:
    name: Release Draft
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}
          
      - name: Set current time
        id: version
        run: echo "::set-output name=text::v$(TZ=Asia/Tokyo date +%y%m%d%H%M)"
        
      - name: Create a draft release
        uses: actions/create-release@v1
        id: createDraftRelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: ${{ github.ref }}_${{ steps.version.outputs.text }}
          # release_name: Release ${{ github.ref }}_${{ steps.version.outputs.text }}
          tag_name: ${{ steps.version.outputs.text }}
          release_name: Release ${{ steps.version.outputs.text }}
          # body: |
          #   ## Changelog
          #   - [ ]
          draft: true
          prerelease: false
          
      - name: Save upload url of this draft release.
        run: |
          echo '${{ steps.createDraftRelease.outputs.upload_url }}' > release_upload_url.txt
          
      - name: Upload `release_upload_url.txt`
        uses: actions/upload-artifact@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: draft-release
          path: release_upload_url.txt

  attach-assets-to-release:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          
    needs: [build, draft-release]
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: draft-release
          
      - id: upload-url
        run: |
          echo "::set-output name=url::$(cat draft-release/release_upload_url.txt)"
          
      - uses: actions/download-artifact@v1
        with:
          name: build-${{ matrix.target }}

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: ./build-${{ matrix.target }}/${{ env.PROJECT_NAME }}-${{ matrix.target }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}.zip
          asset_content_type: application/zip
